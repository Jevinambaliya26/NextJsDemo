// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum userType {
  STANDARD
  ADMIN
  SUPER_ADMIN
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  phoneVerified Boolean   @default(false)
  jobTitle      String
  isActive      Boolean   @default(false)
  password      String
  userType      userType  @default(STANDARD)
  accountNumber Int
  createdById   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?

  createdBy     User?     @relation(name: "userUsers", fields: [createdById], references: [id])
  users         User[]    @relation(name: "userUsers")
  billingHistory BillingHistory[]
  connectedEmail ConnectedEmail?
  salesforce     Salesforce?
  company        Company?
  campaigns      Campaigns[]
  contacts       Contacts[]

  @@map("users")
}

enum planType {
  MONTHLY
  ANNUALLY
}

model Plans {
  id               String    @id @default(cuid())
  name             String
  price            Int
  description      String?   @db.MediumText
  type             planType  @default(MONTHLY)
  additionalCharge Int?
  discount         Int?
  includedVideos   Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?

  billingHistory BillingHistory[]

  @@map("plans")
}

enum paymentTermType {
  ON_THE_DAY
  WEEK       @map("7days")
  MONTH      @map("30days")
  TWO_MONTH  @map("60days")
}

enum paymentMethodType {
  CREDIT_CARD
  MONTHLY_INVOICE
}

enum billingStatus {
  PAID
  EXPIRED
  PENDING
}

model BillingHistory {
  id                      String            @id @default(cuid())
  userId                  String
  planId                  String?
  subscriptionModal       planType
  subscriptionAmount      Int
  goLiveDate              DateTime?
  subscriptionDescription String?           @db.MediumText
  includedVideos          Int?
  paymentTerm             paymentTermType   @default(ON_THE_DAY)
  paymentMethod           paymentMethodType @default(CREDIT_CARD)
  dueDate                 DateTime?
  status                  billingStatus     @default(PENDING)
  stripeCustomerId        String?
  paymentId               String?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime?

  user User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plans? @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("billinghistory")
}

model ConnectedEmail {
  id           String    @id @default(cuid())
  userId       String    @unique
  token        String
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("connectedemail")
}

model Salesforce {
  id           String    @id @default(cuid())
  userId       String    @unique
  instanceUrl  String
  token        String
  refreshToken String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("salesforce")
}

model Company {
  id           String    @id @default(cuid())
  userId       String    @unique
  name         String
  website      String?
  industry     String?
  address      String?
  description  String?   @db.MediumText
  isProviderOf String?
  logo         String?
  location     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Products[]

  @@map("company")
}

model Products {
  id            String    @id @default(cuid())
  companyId     String
  name          String
  whatDoesItDo  String?   @db.MediumText
  HowDoesItWork String?   @db.MediumText
  benefits      String?   @db.MediumText
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?

  company          Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  campaignProducts CampaignProducts[]

  @@map("products")
}

enum videoDurationType {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

enum videoAvatarType {
  MALE
  FEMALE
}

enum scriptToneType {
  COMEDIC
  FORMAL
  INFORMAL
  OPTIMISTIC
  FRIENDLY
  ENCOURAGING
}

model Campaigns {
  id                  String            @id @default(cuid())
  userId              String
  name                String
  videoDuration       videoDurationType @default(ONE)
  videoAvatar         videoAvatarType   @default(MALE)
  videoBackground     String
  scriptTone          scriptToneType    @default(COMEDIC)
  companyLogoIncluded Boolean           @default(false)
  emailInfoSelected   Boolean           @default(false)
  runAutoCampaign     Boolean           @default(false)
  actionButton        String
  numberOfSlides      Int               @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime?

  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts            Contacts[]
  lineItemPerCampaign LineItemPerCampaign[]
  campaignProducts    CampaignProducts[]

  @@map("campaigns")
}

model Contacts {
  id                     String    @id @default(cuid())
  createdBy              String
  campaignId             String
  firstName              String
  lastName               String
  email                  String
  phoneNumber            Int
  companyName            String
  numberOfVideoDelivered Int       @default(0)
  numberOfEmailDelivered Int       @default(0)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime?

  createdByUser       User                  @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  campaign            Campaigns             @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  lineItemPerCampaign LineItemPerCampaign[]

  @@unique([campaignId, email])
  @@map("contacts")
}

enum emailStatusType {
  SUCCESS
  FAIL
}

model LineItemPerCampaign {
  id           String           @id @default(cuid())
  campaignId   String
  contactId    String
  videoId      String
  emailStatus  emailStatusType?
  chatGPTStory String           @db.MediumText
  emailBody    String           @db.LongText
  createdAt    DateTime         @default(now())
  updatedAt    DateTime?

  campaign Campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact  Contacts  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@map("lineitempercampaign")
}

model CampaignProducts {
  campaignId String
  productId  String

  campaign Campaigns @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  product  Products  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([campaignId, productId])
}
